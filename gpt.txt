<?php

namespace App\Telegram;

use App\Services\Weather\MessageBuilder;
use App\Services\Weather\TimelineWeatherService;
use App\Services\Weather\SubscribeService;
use DefStudio\Telegraph\Contracts\Storable;
use DefStudio\Telegraph\Handlers\WebhookHandler;

use Log;

class Handler extends WebhookHandler implements Storable
{
    use \DefStudio\Telegraph\Concerns\HasStorage;

    private const STATE_USER_ACTION_KEY = 'action'; 
    private const ACTION_WEATHER = "weather";
    private const ACTION_SUBSCRIBE = "subscribe";

    private SubscribeService $subscribeService; // C–µ—Ä–≤–∏—Å –ø–æ–¥–ø–∏—Å–æ–∫
    private TimelineWeatherService $weatherService; // –°–µ—Ä–≤–∏—Å –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã

    public function __construct(SubscribeService $subscribeService, TimelineWeatherService $weatherService)
    {
        $this->subscribeService = $subscribeService;
        $this->weatherService = $weatherService;
    }

    public function storageKey(): string|int
    {
        return $this->chat->chat_id; // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID —á–∞—Ç–∞ –∫–∞–∫ ID —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    }

    public function start() 
    {   
        $this->sendWithKeyboard(
            MessageBuilder::startMessage()
        );
    }

    public function weather()
    {
        $this->chat->storage()->forget(self::STATE_USER_ACTION_KEY);
        $this->chat->storage()->set(self::STATE_USER_ACTION_KEY, self::ACTION_WEATHER);
        $this->chat->message(MessageBuilder::askLocation())->send();
    }

    public function subscribe()
    {
        $this->chat->storage()->set(self::STATE_USER_ACTION_KEY, self::ACTION_SUBSCRIBE);

        $subscribe = $this->subscribeService->getSubscribe($this->chat->chat_id); // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ id —á–∞—Ç–∞

        if($subscribe)
        {
            $this->sendWithKeyboard(
                MessageBuilder::subscribeAlreadyExists($subscribe->location)
            );
            
            return;
        } 

        $this->chat
            ->message(MessageBuilder::askLocation())
            ->send();
    }

    public function handleChatMessage(\Illuminate\Support\Stringable $location): void
    {   
        $action = $this->chat->storage()->get(self::STATE_USER_ACTION_KEY);

        switch ($action) {
            case self::ACTION_WEATHER :
                
                $this->sendWithKeyboard(
                    $this->getWeatherForecast($location)
                );
                break;

            case self::ACTION_SUBSCRIBE :

                    $subscribe = $this->subscribeService->getSubscribe($this->chat->chat_id);

                    if(!$subscribe)
                    {
                        try {
                            $weatherData = $this->getWeatherForecast($location);

                            $subscribe = $this->subscribeService->create($this->chat->chat_id, $location);

                            $this->sendWithKeyboard(
                                MessageBuilder::successSubscribe($subscribe->location)
                            );
                        
                            $this->chat->storage()->forget(self::STATE_USER_ACTION_KEY);
                        } catch (\Throwable $e) {
                            Log::error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã', [
                                'location' => $location,
                                'error' => $e->getMessage(),
                            ]);
                            $this->sendWithKeyboard(MessageBuilder::apiErrorMessage());
                        }
                        
                    }
                    
                break;
            
            default:

                $this->sendWithKeyboard('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞');
                $this->chat->storage()->forget(self::STATE_USER_ACTION_KEY);
                break;
        }
    }

    public function unsubscribe()
    {
        $subscribe = $this->subscribeService->getSubscribe($this->chat->chat_id);

        if($subscribe)
        {
            if($this->subscribeService->delete($subscribe))
            {
                $this->sendWithKeyboard(
                    MessageBuilder::declineSubscribe()
                );

                return;
            }

            return;
        }

        $this->sendWithKeyboard(MessageBuilder::subscribeNotExists());
    }

    public function status()
    {
        $subscribe = $this->subscribeService->getSubscribe($this->chat->chat_id);

        if($subscribe)
        {
            $this->sendWithKeyboard(
                MessageBuilder::subscribeAlreadyExists($subscribe->location)
            );

            return;
        }

        $this->sendWithKeyboard(
            MessageBuilder::subscribeNotExists()
        );
    }

    public function handleUnknownCommand(\Illuminate\Support\Stringable $text): void
    {
        $this->sendWithKeyboard(
            MessageBuilder::unknownCommand()
        );
    }
        
    private function getWeatherForecast(string $location): string
    {
        try {
            $data = $this->weatherService->getWeatherData($location);
        } catch (\Throwable $e) {
            Log::error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã', [
                'location' => $location,
                'error' => $e->getMessage(),
            ]);
            return MessageBuilder::apiErrorMessage();
        }
        
        return MessageBuilder::weatherMessage($data);
    }

    private function sendWithKeyboard(string $text)
    {
        $this->chat
            ->message($text)
            ->keyboard(MessageBuilder::keyboard())
            ->send();
    }
}



<?php

namespace App\Console\Commands;

use App\Models\Subscribe;
use App\Services\Weather\MessageBuilder;
use App\Services\Weather\TimelineWeatherService;
use Illuminate\Console\Command;

class SendMorningForecast extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'app:send-morning-forecast';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Command description';

    /**
     * Execute the console command.
     */
    public function handle(TimelineWeatherService $weatherService)
    {
        $subscribes = Subscribe::with('chat')->get();

        foreach ($subscribes as $subscribe) {
            $chat = $subscribe->chat;

            if (!$chat) continue;

            try {
                $weatherData = $weatherService->getWeatherData($subscribe->location);
                
                $chat->message(MessageBuilder::morningMessage($weatherData))
                    ->keyboard(MessageBuilder::keyboard())
                    ->send();
                    
            } catch (\Exception $e) {
                $this->error("–û—à–∏–±–∫–∞ –¥–ª—è —á–∞—Ç–∞ {$subscribe->chat_id}: " . $e->getMessage());
                \Log::error("–£—Ç—Ä–µ–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑: {$subscribe->chat_id} - " . $e->getMessage());
            }
        }
    }
    
}


<?php

namespace App\Services\Weather;

use DefStudio\Telegraph\Keyboard\Button;
use DefStudio\Telegraph\Keyboard\Keyboard;

class MessageBuilder
{
    public static function startMessage(): string
    {
        return "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç <b>Cognitive</b>.\n\n" .
            "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ.\n\n" .
            "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n" .
            "/weather ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É –Ω–∞ –¥–µ–Ω—å\n" .
            "/subscribe ‚Äî –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑\n" .
            "/unsubscribe ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n" .
            "/status ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏";
    }

    public static function weatherMessage(array $data): string
    {
        $rainfallText = $data['rainfall'] > 0 
            ? "üåß –û—Å–∞–¥–∫–∏: {$data['rainfall']} –º–º" 
            : "‚òî –ë–µ–∑ –æ—Å–∞–¥–∫–æ–≤";
        
        return "üå§ <b>–ü–æ–≥–æ–¥–∞ –≤ {$data['address']}</b>\n\n"
            . "üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:\n"
            . "  ‚Ä¢ –°—Ä–µ–¥–Ω—è—è: <b>{$data['avg_temperature']}¬∞C</b>\n"
            . "  ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: <b>{$data['max_temperature']}¬∞C</b>\n\n"
            . "üí® –í–µ—Ç–µ—Ä: <b>{$data['windspeed']} –∫–º/—á</b>\n"
            . "‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ—Å—Ç—å: <b>{$data['cloudcover']}%</b>\n"
            . $rainfallText;
    }

    public static function morningMessage(array $data): string
    {
        $rainfallText = $data['rainfall'] > 0 
            ? "üåß –û—Å–∞–¥–∫–∏: {$data['rainfall']} –º–º" 
            : "‚òî –ë–µ–∑ –æ—Å–∞–¥–∫–æ–≤";
        
        return "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!\n\n"
            . "üå§ <b>–ü–æ–≥–æ–¥–∞ –≤ {$data['address']} —Å–µ–≥–æ–¥–Ω—è:</b>\n\n"
            . "üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:\n"
            . "  ‚Ä¢ –°—Ä–µ–¥–Ω—è—è: <b>{$data['avg_temperature']}¬∞C</b>\n"
            . "  ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: <b>{$data['max_temperature']}¬∞C</b>\n\n"
            . "üí® –í–µ—Ç–µ—Ä: <b>{$data['windspeed']} –∫–º/—á</b>\n"
            . "‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ—Å—Ç—å: <b>{$data['cloudcover']}%</b>\n"
            . $rainfallText
            . "\n\n–£–¥–∞—á–Ω–æ–≥–æ –¥–Ω—è!";
    }

    public static function askLocation(): string
    {
        return "–£–∫–∞–∂–∏—Ç–µ –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–¢–∞–º–∞–Ω—å, –¢–µ–º—Ä—é–∫—Å–∫–∏–π —Ä–∞–π–æ–Ω</i>";
    }

    public static function successSubscribe(string $location): string
    {
        return "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É—Ç—Ä–µ–Ω–Ω—é—é —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ –∞–¥—Ä–µ—Å—É <i>{$location}</i> –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /unsubscribe";
    }

    public static function subscribeAlreadyExists(string $location): string
    {
        return "‚ÑπÔ∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ –∞–¥—Ä–µ—Å—É <i>{$location}</i>\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /unsubscribe";
    }

    public static function subscribeNotExists(): string
    {
        return "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫";
    }

    public static function unknownCommand():string
    {
        return "‚ÑπÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞";
    }

    public static function declineSubscribe(): string
    {
        return "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞";
    }

    public static function apiErrorMessage(): string
    {
        return "‚ùå –£–∫–∞–∑–∞–Ω–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —Å–µ—Ä–≤–∏—Å –ø–æ–≥–æ–¥—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.";
    }

    public static function keyboard()
    {
        $keyboard = Keyboard::make()
        ->buttons([
            Button::make('‚úâÔ∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è')->action('subscribe'),
            Button::make('üå§ –ü–æ–≥–æ–¥–∞')->action('weather'),
            Button::make('‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è')->action('unsubscribe'),
            Button::make('‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å')->action('status'),
            Button::make('üÜò –ü–æ–º–æ—â—å')->action('start'),
        ])
        ->chunk(2)
        ->rightToLeft();

        return $keyboard;
    }
}

<?php

use App\Console\Commands\SendMorningForecast;
use Illuminate\Support\Facades\Schedule;

Schedule::command(SendMorningForecast::class)->dailyAt('7:00');


<?php

namespace App\Services\Weather;

use App\Models\Subscribe;
use Illuminate\Support\Facades\Log;

class SubscribeService
{
    public function getSubscribe(string $chat_id): ?Subscribe
    {
        return Subscribe::where('chat_id', $chat_id)->first();
    }

    public function create(string $chat_id, string $location): Subscribe
    {
        try {
            return Subscribe::create([
                'chat_id' => $chat_id,
                'location' => $location,
            ]);
        } catch (\Exception $e) {
            Log::error("Subscription creation failed for {$chat_id}: " . $e->getMessage());
            throw $e;
        }
    }

    public function delete(Subscribe $subscribe): bool
    {
        try {
            return $subscribe->delete();
        } catch (\Exception $e) {
            Log::error("Subscription deletion failed for {$subscribe->chat_id}: " . $e->getMessage());
            throw $e;
        }
    }
}


<?php

namespace App\Services\Weather;

use Illuminate\Database\Eloquent\Casts\Json;
use Illuminate\Support\Facades\Http;
use Log;

class TimelineWeatherService
{
    private $endpoint;
    private $token;

    public function __construct()
    {
        $this->endpoint = config('services.timeline.endpoint');
        $this->token = config('services.timeline.api_key');
    }

    public function getWeatherData(string $location)
    {
        $url = $this->endpoint . $location;

        $response = Http::get($url, [
            'key' => $this->token,
            'unitGroup' => 'metric',
        ])->json();

        $weather_data = [
            'address' => $response['resolvedAddress'],
            'avg_temperature' => $response['days'][0]['temp'],
            'max_temperature' => $response['days'][0]['tempmax'],
            'windspeed' => $response['days'][0]['windspeed'],
            'cloudcover' => $response['days'][0]['cloudcover'],
            'rainfall' => $response['days'][0]['precip'],
        ];
        
        return $weather_data;     
    }
}